From 3fde8eb195690695b67bfca868c14a4a6983fb80 Mon Sep 17 00:00:00 2001
From: Michele Baldessari <michele@acksyn.org>
Date: Tue, 4 Dec 2012 17:02:57 +0100
Subject: [PATCH 17/53] Implement SCTP_GET_ASSOC_STATS

Implement SCTP_GET_ASSOC_STATS to retrieve per association statistics.
This API is not present in rfc 6458, but is modeled after the same call
in OpenSolaris.

V2:
- Do not include SCTP_GET_ASSOC_STATS in the official sctp_opt_info() API

Signed-off: Michele Baldessari <michele@acksyn.org>
---
 man/sctp.7                 |  5 +++++
 src/apps/sctp_darn.c       | 52 +++++++++++++++++++++++++++++++++++++++++++++-
 src/include/netinet/sctp.h | 29 ++++++++++++++++++++++++++
 3 files changed, 85 insertions(+), 1 deletion(-)

diff --git a/man/sctp.7 b/man/sctp.7
index 268d31a..d6a3e56 100644
--- a/man/sctp.7
+++ b/man/sctp.7
@@ -389,6 +389,11 @@ of an association, including its reachability state, congestion window,
 and retransmission timer values.  This information is read-only. The structure
 sctp_paddr_info defined in /usr/include/netinet/sctp.h is used to access this
 information.
+.TP
+.B SCTP_GET_ASSOC_STATS
+Applications can retrieve current statistics about an association, including
+SACKs sent and received, SCTP packets sent and received. The complete list can
+be found in /usr/include/netinet/sctp.h in struct sctp_assoc_stats.
 .SH AUTHORS
 Sridhar Samudrala <sri@us.ibm.com>
 .SH "SEE ALSO"
diff --git a/src/apps/sctp_darn.c b/src/apps/sctp_darn.c
index 625e541..c326319 100644
--- a/src/apps/sctp_darn.c
+++ b/src/apps/sctp_darn.c
@@ -143,7 +143,8 @@ enum inter_cmd_num {
 	INTER_ABORT,
 	INTER_NODELAY,
 	INTER_MAXSEG,
-	INTER_HEARTBEAT
+	INTER_HEARTBEAT,
+	INTER_GET_STATS
 };
 
 enum shutdown_type {
@@ -170,6 +171,7 @@ struct inter_entry inter_commands[] = {
 	{"nodelay", INTER_NODELAY},
 	{"maxseg", INTER_MAXSEG},
 	{"heartbeat", INTER_HEARTBEAT},
+	{"stats", INTER_GET_STATS},
 	{NULL, -1},
 };
 
@@ -195,6 +197,7 @@ static void  spp_hb_demand_func(char *, int, char *, int);
 static int nodelay_func(char *, int, int val, int set);
 static int maxseg_func(char *, int, int val, int set);
 static int shutdown_func(char *argv0, int *skp, int shutdown_type);
+static int get_assocstats_func(int, sctp_assoc_t);
 static int test_sk_for_assoc(int sk, sctp_assoc_t assoc_id);
 static char * gen_message(int);
 static sctp_assoc_t test_recv_assoc_change(int);
@@ -1528,6 +1531,7 @@ parse_inter_commands(char *argv0, char *input, int snd_only)
 		printf("nodelay=<0|1>    - Get/Set NODELAY option.\n");
 		printf("shutdown         - Shutdown the association.\n");
 		printf("abort            - Abort the association.\n");
+		printf("stats            - Print GET_ASSOC_STATS (if available in kernel).\n");
 		printf("?                - Help. Display this message.\n");
 		return -1;
 	}
@@ -1631,6 +1635,9 @@ parse_inter_commands(char *argv0, char *input, int snd_only)
 				val = (set) ? atoi(p) : 0;
 				maxseg_func(argv0, inter_sk, val, set);
 				break;
+			case INTER_GET_STATS:
+				get_assocstats_func(inter_sk, associd);
+				break;
 			default:
 				goto err_input;
 				break;
@@ -2231,6 +2238,49 @@ shutdown_func(char *argv0, int *skp, int shutdown_type)
 }
 
 static int
+get_assocstats_func(int sk, sctp_assoc_t assoc_id)
+{
+	int error = 0;
+	struct sctp_assoc_stats stats;
+	socklen_t len;
+
+	if (assoc_id == 0) {
+		printf("No association present yet\n");
+		return -1;
+	}
+
+	memset(&stats, 0, sizeof(struct sctp_assoc_stats));
+	stats.sas_assoc_id = assoc_id;
+	len = sizeof(struct sctp_assoc_stats);
+	error = getsockopt(sk, SOL_SCTP, SCTP_GET_ASSOC_STATS,
+			(char *)&stats, &len);
+	if (error != 0) {
+		printf("get_assoc_stats() failed %s\n", strerror(errno));
+		return error;
+	}
+
+	printf("Retransmitted Chunks: %llu\n",              stats.sas_rtxchunks);
+	printf("Gap Acknowledgements Received: %llu\n",     stats.sas_gapcnt);
+	printf("TSN received > next expected: %llu\n",      stats.sas_outofseqtsns);
+	printf("SACKs sent: %llu\n",                        stats.sas_osacks);
+	printf("SACKs received: %llu\n",                    stats.sas_isacks);
+	printf("Control chunks sent : %llu\n",              stats.sas_octrlchunks);
+	printf("Control chunks received : %llu\n",          stats.sas_ictrlchunks);
+	printf("Ordered data chunks sent: %llu\n",          stats.sas_oodchunks);
+	printf("Ordered data chunks received: %llu\n",      stats.sas_iodchunks);
+	printf("Unordered data chunks sent: %llu\n",        stats.sas_ouodchunks);
+	printf("Unordered data chunks received: %llu\n",    stats.sas_iuodchunks);
+	printf("Dups received (ordered+unordered): %llu\n", stats.sas_idupchunks);
+	printf("Packets sent: %llu\n",                      stats.sas_opackets);
+	printf("Packets received: %llu\n",                  stats.sas_ipackets);
+	printf("Maximum Observed RTO this period: %llu - Transport: ", stats.sas_maxrto);
+	print_sockaddr((struct sockaddr *)&stats.sas_obs_rto_ipaddr);
+	printf("\n");
+
+	return 0;
+}
+
+static int
 test_sk_for_assoc(int sk, sctp_assoc_t assoc_id)
 {
 	int error = 0;
diff --git a/src/include/netinet/sctp.h b/src/include/netinet/sctp.h
index 8cc119f..fcf594b 100644
--- a/src/include/netinet/sctp.h
+++ b/src/include/netinet/sctp.h
@@ -107,6 +107,9 @@ typedef __s32 sctp_assoc_t;
 #define SCTP_SOCKOPT_CONNECTX	110		/* CONNECTX requests. */
 #define SCTP_SOCKOPT_CONNECTX3	111	/* CONNECTX requests (updated) */
 
+/* SCTP socket option used to read per endpoint association statistics. */
+#define SCTP_GET_ASSOC_STATS    112      /* Read only */
+
 /*
  * 5.2.1 SCTP Initiation Structure (SCTP_INIT)
  *
@@ -727,6 +730,32 @@ struct sctp_getaddrs {
 	__u8			addrs[0]; /*output, variable size*/
 };
 
+/* A socket user request obtained via SCTP_GET_ASSOC_STATS that retrieves
+ * association stats. All stats are counts except sas_maxrto and
+ * sas_obs_rto_ipaddr. maxrto is the max observed rto + transport since
+ * the last call. Will return 0 when did not change since last call
+ */
+struct sctp_assoc_stats {
+	sctp_assoc_t	sas_assoc_id;    /* Input */
+					 /* Transport of the observed max RTO spike */
+	struct sockaddr_storage sas_obs_rto_ipaddr;
+	__u64		sas_maxrto;      /* Maximum Observed RTO for period */
+	__u64		sas_isacks;	 /* SACKs received */
+	__u64		sas_osacks;	 /* SACKs sent */
+	__u64		sas_opackets;	 /* Packets sent */
+	__u64		sas_ipackets;	 /* Packets received */
+	__u64		sas_rtxchunks;   /* Retransmitted Chunks */
+	__u64		sas_outofseqtsns;/* TSN received > next expected */
+	__u64		sas_idupchunks;  /* Dups received (ordered+unordered) */
+	__u64		sas_gapcnt;      /* Gap Acknowledgements Received */
+	__u64		sas_ouodchunks;  /* Unordered data chunks sent */
+	__u64		sas_iuodchunks;  /* Unordered data chunks received */
+	__u64		sas_oodchunks;	 /* Ordered data chunks sent */
+	__u64		sas_iodchunks;	 /* Ordered data chunks received */
+	__u64		sas_octrlchunks; /* Control chunks sent */
+	__u64		sas_ictrlchunks; /* Control chunks received */
+};
+
 /* These are bit fields for msghdr->msg_flags.  See section 5.1.  */
 /* On user space Linux, these live in <bits/socket.h> as an enum.  */
 enum sctp_msg_flags {
-- 
1.7.11.7

