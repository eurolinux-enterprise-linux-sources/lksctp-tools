From 57dff214cf21e36b10a86d7b04b0b7ab88401878 Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vladislav.yasevich@hp.com>
Date: Thu, 12 Nov 2009 10:38:34 -0500
Subject: [PATCH 09/53] lib: Fix the new connectx api to prefent SEGFAULTS

The new version connectx() that supports non-blocking sockets
fails the regression tests due to additional allocations that
it performes.  It can also segfault as it attempts to copy
addresses from the user provided buffer into a newly allocated
buffer.  To prevent that, we change the api to remove allocations
and pass the user-allocated address buffer unchanged to the kernel.
The api uses sctp_getadds_old structure, whete assoc_id is used
to return the association id, the addr_num is used to convey the
length of the address buffer to the kernel and addrs points
to the user-allocated addrs array the the library now passed on
as is.

Signed-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>
---
 src/lib/connectx.c | 39 +++++++++++++++++----------------------
 1 file changed, 17 insertions(+), 22 deletions(-)

diff --git a/src/lib/connectx.c b/src/lib/connectx.c
index c5c18dd..50cf4c8 100644
--- a/src/lib/connectx.c
+++ b/src/lib/connectx.c
@@ -130,7 +130,8 @@ int sctp_connectx3(int fd, struct sockaddr *addrs, int addrcnt,
 {
 	socklen_t addrs_size = __connectx_addrsize(addrs, addrcnt);
 	int status;
-	char *new_api_buffer;
+	struct sctp_getaddrs_old param;
+	socklen_t opt_len = sizeof(param);
 
 	if (addrs_size < 0)
 		return addrs_size;
@@ -139,28 +140,22 @@ int sctp_connectx3(int fd, struct sockaddr *addrs, int addrcnt,
 	 * Because the id is returned in the option buffer we have prepend
 	 * 32bit to it for the returned association id
 	 */
-	new_api_buffer = (char*) malloc(sizeof(sctp_assoc_t) + addrs_size);
-	if (new_api_buffer) {
-		socklen_t option_len = addrs_size + sizeof(sctp_assoc_t);
-
-		memset(new_api_buffer, 0, sizeof(sctp_assoc_t));
-		memcpy(new_api_buffer + sizeof(sctp_assoc_t), addrs,
-			addrs_size);
-		status = getsockopt(fd, SOL_SCTP, SCTP_SOCKOPT_CONNECTX3,
-		                    new_api_buffer, &option_len);
-		if (status == 0 || errno == EINPROGRESS) {
-			/* Succeeded immediately, or initiated on non-blocking
-			 * socket.
-			 */
-			if (id)
-				*id = *(uint32_t*)new_api_buffer;
-		}
+	param.assoc_id = 0;
+	param.addr_num = addrs_size;
+	param.addrs = addrs;
+	status = getsockopt(fd, SOL_SCTP, SCTP_SOCKOPT_CONNECTX3,
+		            &param, &opt_len);
+	if (status == 0 || errno == EINPROGRESS) {
+		/* Succeeded immediately, or initiated on non-blocking
+		 * socket.
+		 */
+		if (id)
+			*id = param.assoc_id;
+	}
 
-		free(new_api_buffer);
-		if (errno != ENOPROTOOPT) {
-			/* No point in trying the fallbacks*/
-			return status;
-		}
+	if (errno != ENOPROTOOPT) {
+		/* No point in trying the fallbacks*/
+		return status;
 	}
 
 	/* The first incarnation of updated connectx api didn't work for
-- 
1.7.11.7

