From 6c00ed9653870e5108286f3f9663c5ed1140c00e Mon Sep 17 00:00:00 2001
From: Vlad Yasevich <vladislav.yasevich@hp.com>
Date: Thu, 12 Nov 2009 10:59:51 -0500
Subject: [PATCH 12/53] api:  Remove the old/obsolete getaddrs interfaces.

The new kernel has removed the 5 year old interfaces for
the 64-bit unsafe get_[l|p]addr interfaces.  Remove
them from the user library as well.

Signed-off-by: Vlad Yasevich <vladislav.yasevich@hp.com>
---
 src/include/netinet/sctp.h |  5 ----
 src/lib/addrs.c            | 57 +---------------------------------------------
 2 files changed, 1 insertion(+), 61 deletions(-)

diff --git a/src/include/netinet/sctp.h b/src/include/netinet/sctp.h
index 888ce1b..84838ae 100644
--- a/src/include/netinet/sctp.h
+++ b/src/include/netinet/sctp.h
@@ -135,15 +135,10 @@ enum sctp_optname {
 	SCTP_SOCKOPT_PEELOFF, 	/* peel off association. */
 #define SCTP_SOCKOPT_PEELOFF	SCTP_SOCKOPT_PEELOFF
 	SCTP_GET_PEER_ADDRS_NUM_OLD, 	/* Get number of peer addresss. */
-#define SCTP_GET_PEER_ADDRS_NUM_OLD	SCTP_GET_PEER_ADDRS_NUM_OLD
 	SCTP_GET_PEER_ADDRS_OLD, 	/* Get all peer addresss. */
-#define SCTP_GET_PEER_ADDRS_OLD	SCTP_GET_PEER_ADDRS_OLD
 	SCTP_GET_LOCAL_ADDRS_NUM_OLD, 	/* Get number of local addresss. */
-#define SCTP_GET_LOCAL_ADDRS_NUM_OLD	SCTP_GET_LOCAL_ADDRS_NUM_OLD
 	SCTP_GET_LOCAL_ADDRS_OLD, 	/* Get all local addresss. */
-#define SCTP_GET_LOCAL_ADDRS_OLD	SCTP_GET_LOCAL_ADDRS_OLD
 	SCTP_SOCKOPT_CONNECTX_OLD, /* CONNECTX requests. OLD implementation */
-#define SCTP_SOCKOPT_CONNECTX_OLD	SCTP_SOCKOPT_CONNECTX_OLD
 	SCTP_GET_PEER_ADDRS, 	/* Get all peer addresss. */
 #define SCTP_GET_PEER_ADDRS	SCTP_GET_PEER_ADDRS
 	SCTP_GET_LOCAL_ADDRS, 	/* Get all local addresss. */
diff --git a/src/lib/addrs.c b/src/lib/addrs.c
index bcbcec0..65f5222 100644
--- a/src/lib/addrs.c
+++ b/src/lib/addrs.c
@@ -29,56 +29,12 @@
 #include <errno.h>
 
 /* 
- * Get local/peer addresses using the old API 
- * Old kernels (2.6.13 and earlier) only support this API but it breaks 32-bit
- * programs on 64-bit kernels.
- */
-static int
-sctp_getaddrs_old(int sd, sctp_assoc_t id, int optname_num, int optname_old,
-		  struct sockaddr **addrs)
-{
-	socklen_t len = sizeof(sctp_assoc_t);
-	int cnt, err;
-	struct sctp_getaddrs_old getaddrs;
-
-	cnt = getsockopt(sd, SOL_SCTP, optname_num, &id, &len);
-	if (cnt < 0)
-		return -1;
-
-	if (0 == cnt) {
-		*addrs = NULL;
-		return 0;
-	}
-
-	len = cnt * sizeof(struct sockaddr_in6);
-
-	getaddrs.assoc_id = id;
-	getaddrs.addr_num = cnt;
-	getaddrs.addrs = (struct sockaddr *)malloc(len);
-	if (NULL == getaddrs.addrs)
-		return -1;
-
-	len = sizeof(getaddrs);
-	err = getsockopt(sd, SOL_SCTP, optname_old, &getaddrs, &len);
-	if (err < 0) {
-		free(getaddrs.addrs);
-		return -1;
-	}
-
-	*addrs = getaddrs.addrs;
-
-	return getaddrs.addr_num;
-
-} /* sctp_getaddrs_old() */
-
-/* 
  * Common getsockopt() layer 
  * If the NEW getsockopt() API fails this function will fall back to using
  * the old API
  */
 static int
-sctp_getaddrs(int sd, sctp_assoc_t id,
-	      int optname_new, int optname_num_old, int optname_old,
+sctp_getaddrs(int sd, sctp_assoc_t id, int optname_new,
 	      struct sockaddr **addrs)
 {
 	int cnt, err;
@@ -99,13 +55,6 @@ sctp_getaddrs(int sd, sctp_assoc_t id,
 			/*got it*/
 			break;
 		}
-		if (errno == ENOPROTOOPT) {
-			/*Kernel does not support new API*/
-			free(getaddrs);
-			return sctp_getaddrs_old(sd, id,
-						 optname_num_old, optname_old,
-						 addrs);
-		}
 		if (errno != ENOMEM ) {
 			/*unknown error*/
 			free(getaddrs);
@@ -145,8 +94,6 @@ sctp_getpaddrs(int sd, sctp_assoc_t id, struct sockaddr **addrs)
 {
 	return sctp_getaddrs(sd, id,
 			     SCTP_GET_PEER_ADDRS,
-			     SCTP_GET_PEER_ADDRS_NUM_OLD,
-			     SCTP_GET_PEER_ADDRS_OLD,
 			     addrs);
 } /* sctp_getpaddrs() */
 
@@ -170,8 +117,6 @@ sctp_getladdrs(int sd, sctp_assoc_t id, struct sockaddr **addrs)
 {
 	return sctp_getaddrs(sd, id,
 			     SCTP_GET_LOCAL_ADDRS,
-			     SCTP_GET_LOCAL_ADDRS_NUM_OLD,
-			     SCTP_GET_LOCAL_ADDRS_OLD,
 			     addrs);
 } /* sctp_getladdrs() */
 
-- 
1.7.11.7

