From 2e5e1046396e6a3a0be02a3d7289c2655f4ed0a9 Mon Sep 17 00:00:00 2001
From: Daniel Borkmann <dborkman@redhat.com>
Date: Tue, 22 Jan 2013 10:49:25 +0100
Subject: [PATCH 30/53] test_1_to_1_threads: fixup pthread init and exit
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fixes:

  test_1_to_1_threads.c: In function ‘t_send’:
  test_1_to_1_threads.c:93:15: warning: variable ‘buffer_snd’ set but not used [-Wunused-but-set-variable]
  test_1_to_1_threads.c: In function ‘main’:
  test_1_to_1_threads.c:177:22: warning: cast to pointer from integer of different size [-Wint-to-pointer-cast]

Also, don't use pthread_exit() as a return in main(), but rather in the
thread handler instead of return!

$ ./test_1_to_1_threads
test_1_to_1_threads.c  1 PASS : send and receive data across multiple threads - SUCCESS

Signed-off-by: Daniel Borkmann <dborkman@redhat.com>
---
 src/func_tests/test_1_to_1_threads.c | 16 +++++++---------
 1 file changed, 7 insertions(+), 9 deletions(-)

diff --git a/src/func_tests/test_1_to_1_threads.c b/src/func_tests/test_1_to_1_threads.c
index 84b9fb2..80fa4c4 100644
--- a/src/func_tests/test_1_to_1_threads.c
+++ b/src/func_tests/test_1_to_1_threads.c
@@ -90,14 +90,11 @@ void
 t_send(int id) {
         struct msghdr outmessage;
         struct sctp_sndrcvinfo *sinfo;
-        char *buffer_snd;
         struct cmsghdr *cmsg;
         struct iovec out_iov;
         char outcmsg[CMSG_SPACE(sizeof(sctp_cmsg_data_t))];
 
         memset(&outmessage, 0, sizeof(outmessage));
-        buffer_snd = malloc(100);
-
         outmessage.msg_name = &conn_addr;
         outmessage.msg_namelen = sizeof(conn_addr);
         outmessage.msg_iov = &out_iov;
@@ -120,7 +117,10 @@ t_send(int id) {
         test_sendmsg(client_sk, &outmessage, 0, strlen(message)+1);
 }
 
-void * relay (int id) {
+void *relay(void *arg)
+{
+	int id = *(int *) arg;
+
 	if (id == 0) {
 		t_send(id);
 	} else if (id == THREADS -1) {
@@ -130,9 +130,8 @@ void * relay (int id) {
 		t_send(id);
 	}
 
-	return 0;
+	pthread_exit(NULL);
 }
-	
 
 int 
 main(void) 
@@ -173,8 +172,7 @@ main(void)
 
 	for ( i = 0; i < THREAD_SND_RCV_LOOPS; i++ ) {
 		for (cnt = 1; cnt < THREADS; cnt++) {
-			status = pthread_create(&thread[cnt], &attr,
-						(void *)relay, (void*)cnt);
+			status = pthread_create(&thread[cnt], &attr, relay, &cnt);
 			if (status)
 				tst_brkm(TBROK, tst_exit, "pthread_create "
                          		 "failed status:%d, errno:%d", status,
@@ -194,5 +192,5 @@ main(void)
 	tst_resm(TPASS, "send and receive data across multiple threads - "
 		 "SUCCESS");
 
-	pthread_exit(NULL);
+	return 0;
 }
-- 
1.7.11.7

